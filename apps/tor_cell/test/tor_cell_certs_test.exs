# SPDX-License-Identifier: ISC

defmodule TorCellCertsTest do
  use ExUnit.Case
  doctest TorCell.Certs

  test "decodes a CERTS TorCell" do
    raw =
      <<1, 4, 0, 7, 33, 196, 1, 21, 195, 194, 141, 132, 50, 207, 113, 139, 70, 72, 23, 89, 84,
        174, 235, 255, 176, 47, 135, 165, 114, 166, 20, 243, 149, 223, 81, 221, 149, 34, 121, 1,
        0, 32, 4, 0, 194, 4, 162, 205, 242, 49, 217, 184, 187, 127, 147, 15, 211, 173, 83, 179,
        26, 111, 116, 63, 71, 28, 173, 15, 33, 128, 137, 199, 170, 24, 162, 214, 126, 87, 191,
        221, 228, 211, 40, 51, 76, 218, 59, 44, 246, 69, 128, 88, 202, 119, 149, 210, 218, 90,
        202, 93, 101, 175, 206, 140, 203, 91, 184, 175, 31, 33, 72, 63, 91, 196, 103, 40, 144,
        114, 231, 206, 29, 192, 53, 144, 214, 70, 133, 170, 155, 176, 21, 31, 30, 86, 51, 140,
        142, 132, 60, 4>>

    # TODO: The <<1>> <> <<4>> ... shall be included in raw
    payload = <<1>> <> <<4>> <> <<byte_size(raw)::16>> <> raw

    assert TorCell.Certs.decode(payload) == %TorCell.Certs{
             certs: [
               %TorCell.Certs.Cert{
                 cert: %TorCert.Ed25519{
                   cert_key_type: :ed25519,
                   cert_type: :ed25519_signing_id,
                   certified_key:
                     <<21, 195, 194, 141, 132, 50, 207, 113, 139, 70, 72, 23, 89, 84, 174, 235,
                       255, 176, 47, 135, 165, 114, 166, 20, 243, 149, 223, 81, 221, 149, 34,
                       121>>,
                   expiration_date: ~U[2023-04-27 20:00:00Z],
                   extensions: [
                     %TorCert.Ed25519.Extension{
                       data:
                         <<194, 4, 162, 205, 242, 49, 217, 184, 187, 127, 147, 15, 211, 173, 83,
                           179, 26, 111, 116, 63, 71, 28, 173, 15, 33, 128, 137, 199, 170, 24,
                           162, 214>>,
                       flags: nil,
                       type: :signed_with_ed25519_key
                     }
                   ],
                   signature:
                     <<126, 87, 191, 221, 228, 211, 40, 51, 76, 218, 59, 44, 246, 69, 128, 88,
                       202, 119, 149, 210, 218, 90, 202, 93, 101, 175, 206, 140, 203, 91, 184,
                       175, 31, 33, 72, 63, 91, 196, 103, 40, 144, 114, 231, 206, 29, 192, 53,
                       144, 214, 70, 133, 170, 155, 176, 21, 31, 30, 86, 51, 140, 142, 132, 60,
                       4>>
                 },
                 type: :ed25519_id_signing
               }
             ]
           }
  end

  test "encodes a CERTS TorCell" do
    cell = %TorCell.Certs{
      certs: [
        %TorCell.Certs.Cert{
          cert: %TorCert.Ed25519{
            cert_key_type: :ed25519,
            cert_type: :ed25519_signing_id,
            certified_key:
              <<21, 195, 194, 141, 132, 50, 207, 113, 139, 70, 72, 23, 89, 84, 174, 235, 255, 176,
                47, 135, 165, 114, 166, 20, 243, 149, 223, 81, 221, 149, 34, 121>>,
            expiration_date: ~U[2023-04-27 20:00:00Z],
            extensions: [
              %TorCert.Ed25519.Extension{
                data:
                  <<194, 4, 162, 205, 242, 49, 217, 184, 187, 127, 147, 15, 211, 173, 83, 179, 26,
                    111, 116, 63, 71, 28, 173, 15, 33, 128, 137, 199, 170, 24, 162, 214>>,
                flags: nil,
                type: :signed_with_ed25519_key
              }
            ],
            signature:
              <<126, 87, 191, 221, 228, 211, 40, 51, 76, 218, 59, 44, 246, 69, 128, 88, 202, 119,
                149, 210, 218, 90, 202, 93, 101, 175, 206, 140, 203, 91, 184, 175, 31, 33, 72, 63,
                91, 196, 103, 40, 144, 114, 231, 206, 29, 192, 53, 144, 214, 70, 133, 170, 155,
                176, 21, 31, 30, 86, 51, 140, 142, 132, 60, 4>>
          },
          type: :ed25519_id_signing
        }
      ]
    }

    raw =
      <<1, 4, 0, 7, 33, 196, 1, 21, 195, 194, 141, 132, 50, 207, 113, 139, 70, 72, 23, 89, 84,
        174, 235, 255, 176, 47, 135, 165, 114, 166, 20, 243, 149, 223, 81, 221, 149, 34, 121, 1,
        0, 32, 4, 0, 194, 4, 162, 205, 242, 49, 217, 184, 187, 127, 147, 15, 211, 173, 83, 179,
        26, 111, 116, 63, 71, 28, 173, 15, 33, 128, 137, 199, 170, 24, 162, 214, 126, 87, 191,
        221, 228, 211, 40, 51, 76, 218, 59, 44, 246, 69, 128, 88, 202, 119, 149, 210, 218, 90,
        202, 93, 101, 175, 206, 140, 203, 91, 184, 175, 31, 33, 72, 63, 91, 196, 103, 40, 144,
        114, 231, 206, 29, 192, 53, 144, 214, 70, 133, 170, 155, 176, 21, 31, 30, 86, 51, 140,
        142, 132, 60, 4>>

    # TODO: The <<1>> <> <<4>> ... shall be included in raw
    assert TorCell.Certs.encode(cell) == <<1>> <> <<4>> <> <<byte_size(raw)::16>> <> raw
  end
end
